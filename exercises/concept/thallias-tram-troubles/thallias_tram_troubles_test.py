import unittest
import pytest

from thallias_tram_troubles import time_table_for_a_weekday, time_table_for_a_specific_range, fewest_transfers, fastest_route, update___

class ThalliasTramTroublesTest(unittest.TestCase):

    @pytest.mark.task(taskno=1)
    def test_time_table_for_a_weekday(self):
        input_data = (([['7:00', '12:00', '19:00'], ('7:00', '13:00', '17:00'), ['7:00', '12:00', '17:00'], ('10:00', '12:00', '17:00'), ('7:00', '15:00', '17:00'), ['7:00', '12:00'], ['7:00', '12:00']],2),
        ((('5:00', '7:00', '12:00', '15:00', '18:00'),('6:00', '8:00', '13:00', '14:00', '17:00'),('4:00', '6:00', '9:00', '12:00', '18:00'),('6:00', '7:30', '16:00', '18:00', '19:00'),('6:00', '9:00', '12:00', '13:00', '18:00'), ('7:00', '8:00', '10:00', '12:00', '19:00'),('7:00', '10:00', '12:00', '15:00', '18:00')), 6),
        ([['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00'], ['4:00', '6:00', '8:00', '9:00', '11:00', '14:00', '17:00', '19:00', '21:00']],4)
        )
        output_data = (['7:00', '12:00', '17:00'], ('7:00', '10:00', '12:00', '15:00', '18:00'), ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'])

        for variant, (input_data, output_data) in enumerate(zip(input_data, output_data), start=1):
            with self.subTest(f"variation #{variant}", input_data=input_data, output_data=output_data):
                self.assertEqual(time_table_for_a_weekday(*input_data), output_data)

    @pytest.mark.task(taskno=2)
    def test_time_table_for_a_specific_range(self):
        input_data = (
        ([['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00', '23:30'], ['4:00', '6:00', '7:00', '8:00', '9:00', '11:00', '12:00', '14:00', '17:00', '19:00', '21:00'], ['4:00', '6:00', '8:00', '9:00', '11:00', '14:00', '17:00', '19:00', '21:00']],4, 2,5),
        ((['4:00' ,'7:00', '8:00', '9:00', '15:00'], ['7:00', '8:00', '9:00', '18:00'], ['6:00', '7:00', '8:00', '9:00', '15:00'], ['6:00', '7:00', '8:00', '9:00', '18:00'], ['5:00', '7:00', '8:00', '9:00', '15:00'], ['5:00', '7:00', '8:00', '9:00', '18:00'], ['8:00', '9:00']), 1, 0, 1),
        ((('9:00', '10:00', '14:00', '15:00', '18:00'),('9:00', '10:00', '14:00', '15:00', '18:00'),('9:00', '10:00', '14:00', '15:00', '18:00'),('9:00', '10:00', '14:00', '15:00', '18:00'),('9:00', '10:00', '14:00', '15:00', '18:00'), ('9:00', '10:00', '14:00', '15:00', '18:00'),('9:00', '10:00', '14:00', '15:00', '18:00')), 1, 3, 5),
        )
        output_data = (['7:00', '8:00', '9:00'],['7:00'], ('15:00', '18:00'))

        for variant, (input_data, output_data) in enumerate(zip(input_data, output_data), start=1):
            with self.subTest(f"variation #{variant}", input_data=input_data, output_data=output_data):
                self.assertEqual(time_table_for_a_specific_range(*input_data), output_data)
